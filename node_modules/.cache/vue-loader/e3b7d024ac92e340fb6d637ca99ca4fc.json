{"remainingRequest":"/Users/tb/mini-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tb/mini-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tb/mini-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tb/mini-project/src/components/Nav.vue?vue&type=template&id=65af85a3&","dependencies":[{"path":"/Users/tb/mini-project/src/components/Nav.vue","mtime":1614917117622},{"path":"/Users/tb/mini-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tb/mini-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tb/mini-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tb/mini-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}